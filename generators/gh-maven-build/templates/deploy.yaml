name: Deploy

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SERVICE_PROJECT: <%= projectName %>
  SERVICE_NAME: <%= serviceName %>
  JOB: buildByToken/buildWithParameters?job=<%= projectName %>/<%= serviceName %>
  URL: https://cd.io.nrs.gov.bc.ca

jobs:
  deploy-snapshot:
    name: Deploy development version
    id: deploy-snapshot
    if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Set build number and build guid (intention)
        run: |
          RESPONSE=$(curl -s -X 'POST' \
            "${BROKER_URL}/v1/intention/search?where=%7B%22actions.action%22%3A%22package-build%22%2C%22actions.service.project%22%3A%22${SERVICE_PROJECT}%22%2C%22actions.service.name%22%3A%22${SERVICE_NAME}%22%2C%22actions.package.buildVersion%22%3A%22${github.sha}%22%7D&offset=0&limit=1" \
            -H 'accept: application/json' \
            -H 'Authorization: Bearer '"${BROKER_JWT}"'' \
            -d '')
          echo "project_version=$(echo ${RESPONSE} | jq -r '.data[].actions[].package.version')" >> $GITHUB_OUTPUT
          echo "build_guid=$(echo ${RESPONSE} | jq -r '.data[].id')" >> $GITHUB_OUTPUT
          echo "build_number=$(echo ${RESPONSE} | jq -r '.data[].actions[].package.buildNumber')" >> $GITHUB_OUTPUT
        env:
          BROKER_URL: https://nr-broker.apps.silver.devops.gov.bc.ca
          BROKER_JWT: ${{ secrets.BROKER_JWT }}
          SERVICE_PROJECT: ${{ env.SERVICE_PROJECT }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}

  deploy-tag:
    name: Deploy release version
    id: deploy-tag
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Set build number and build guid (intention)
        run: |
          TAG=${{ github.ref_name }}
          PROJECT_VERSION=${TAG#v}
          RESPONSE=$(curl -s -X 'POST' \
            "${BROKER_URL}/v1/intention/search?where=%7B%22actions.action%22%3A%22package-build%22%2C%22actions.service.project%22%3A%22${SERVICE_PROJECT}%22%2C%22actions.service.name%22%3A%22${SERVICE_NAME}%22%2C%22actions.package.version%22%3A%22${PROJECT_VERSION}%22%7D&offset=0&limit=1" \
            -H 'accept: application/json' \
            -H 'Authorization: Bearer '"${BROKER_JWT}"'' \
            -d '')
          echo "project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "build_guid=$(echo ${RESPONSE} | jq -r '.data[].id')" >> $GITHUB_OUTPUT
          echo "build_number=$(echo ${RESPONSE} | jq -r '.data[].actions[].package.buildNumber')" >> $GITHUB_OUTPUT
        env:
          BROKER_URL: https://nr-broker.apps.silver.devops.gov.bc.ca
          BROKER_JWT: ${{ secrets.BROKER_JWT }}
          SERVICE_PROJECT: ${{ env.SERVICE_PROJECT }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
  submit-job:
    name: Submit job
    if: |
      always() &&
      ((needs.deploy-snapshot.result == 'success' && needs.deploy-tag.result == 'skipped') ||
      (needs.deploy-snapshot.result == 'skipped' && needs.deploy-tag.result == 'success'))
    needs: [deploy-snapshot, deploy-tag]
    runs-on: ubuntu-latest
      - name: Submit a job to Jenkins
        run: |
          curl \
          --data-urlencode "token=${{ secrets.JENKINS_TOKEN }}" \
          --data-urlencode "githubToken=${{ secrets.GITHUB_TOKEN }}" \
          --data-urlencode "artifactoryBuildNumber=${{ env.BUILD_NUMBER }}" \
          --data-urlencode "cdVersion=${{ env.PROJECT_VERSION }}" \
          --data-urlencode "gitBranch=main" \
          --data-urlencode "intentionId=${{ env.BUILD_GUID }}" \
          --data-urlencode "gitTag=${{ github.ref_name }}" \
          -H "Connection: close" \
          ${{ env.URL }}/${{ env.JOB }}
        env:
          PROJECT_VERSION: ${{ jobs.deploy-snapshot.outputs.project_version || jobs.deploy-tag.outputs.project_version }}
          BUILD_GUID: ${{ jobs.deploy-snapshot.outputs.build_guid || jobs.deploy-tag.outputs.build_guid }}
          BUILD_NUMBER: ${{ jobs.deploy-snapshot.outputs.build_number || jobs.deploy-tag.outputs.build_number }}
      # The automatically generated GitHub token will expire when the workflow ends. We need to wait so the job has time to clone the repo.
      - name: Sleep for 30 seconds
        run: sleep 30s
        shell: bash
